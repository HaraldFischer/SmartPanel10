<?xml version="1.0" encoding="UTF-8"?>
<!--
To change this license header, choose License Headers in Project Properties.
To change this template file, choose Tools | Templates
and open the template in the editor.
-->
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:p="http://primefaces.org/ui" 
      xmlns:c="http://xmlns.jcp.org/jsp/jstl/core">
      
    <h:head>
        <link rel="stylesheet" href="style.css" type="text/css"/>
        <title>Settings</title>
        <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
        <script src="javascript.js"/>
        <script>
            
        </script>
    </h:head>
    <h:body>
        <script type = "text/javascript" >
            var prevVal;
            var childNode;
            var i;
            
            window.onload = function(){
                
                try{
                    childNode = document.getElementById('idform:idnode');
                    childNode.addEventListener('blur',function(){
                      var testNode = new RegExp("^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$");
                      var match = testNode.test(this.value);
                      if (match === true){
                          
                      }
                      else{
                          alert("Node is not a valid IP Address");
                          $(this).val(prevVal);
                      }
                      
                    });
                    childNode.addEventListener("focus",function(){
                        prevVal = this.value;
                    });
                    
                }
                catch(e){
                    alert("Exception:" + e);
                    $(this).val(prevVal);
                }
            
            
                try{
                    childNode = document.getElementById('idform:idport');
                    childNode.addEventListener('blur',function(){
                        var testPort = new RegExp("^((6553[0-5])|(655[0-2][0-9])|(65[0-4][0-9]{2})|(6[0-4][0-9]{3})|([1-5][0-9]{4})|([0-5]{0,5})|([0-9]{1,4}))$");
                        var match = testPort.test(this.value);
                        if (match === true){
                            
                        }
                        else{
                            alert("Port must be a Value between 0 and 65535");
                            $(this).val(prevVal);
                        }
                    });                                           
                        childNode.addEventListener("focus", function(){
                        prevVal = this.value; 
                    });
                }
                catch(e){
                    alert("Exception:" + e);
                    $(this).val(prevVal);
                }
           
                try{
                    childNode = document.getElementById('idform:idaddress');
                    childNode.addEventListener('blur',function(){
                       var testAddress = new RegExp("^(([0-9][1-9])|([1-9][0-9])|[0-9])$");
                       var match = testAddress.test(this.value);
                       if (match === true){
                           
                       }
                       else{
                           alert("Address must be a Value between 0 and 99");
                           $(this).val(prevVal);
                       }
                    });
                    childNode.addEventListener("focus", function(){
                       prevVal = this.value; 
                    });
                }
                catch(e){
                    alert("Exception:" + e);
                    $(this).val(prevVal);
                }
                
                try{
                    childNode = document.getElementById('idform:idtimer');
                    childNode.addEventListener('blur',function(){
                        var testTimer = new RegExp("^[0-9]{1,4}$");
                        var match = testTimer.test(this.value);
                        if (match === true){
                           
                        }
                        else{
                          alert("Timer must be a Value between 0 and 9999");
                          $(this).val(prevVal);
                          
                        }
                    });
                    childNode.addEventListener("focus",function(){
                        prevVal = this.value;
                    });
                }
                catch(e){
                    alert("Exception:" + e);
                    $(this).val(prevVal);
                }
               
                try{
                    childNode = document.getElementById('idform:idpir');
                    childNode.addEventListener('blur',function(){
                        var testPir = new RegExp("^[0-9]{1,4}$");
                        var match = testPir.test(this.value);
                        if (match === true){
                            
                        }
                        else{
                            alert("Pir must be a Value between 0 and 9999");
                            $(this).val(prevVal);
                        }
                    });
                    childNode.addEventListener("focus", function(){
                        prevVal = this.value;
                    });
                }
                catch(e){
                    alert("Exception:" + e);
                    $(this).val(prevVal);
                }  

                try{
                    childNode = document.getElementById('idform:idwhite');
                    childNode.addEventListener('blur',function(){
                        
                        var str = this.value;
                        var retVal = checkWhite(str);
                        if (retVal === true){
                            
                        }
                        else{
                            alert("White must be a Value between 0 and 255");
                            $(this).val(prevVal);                            
                        }
                        
                    });
                    childNode.addEventListener("focus", function(){
                        prevVal = this.value;
                    });
                }
                catch(e){
                    alert("Exception:" + e);
                    $(this).val(prevVal);
                }
                
            };
            
            window.onbeforeunload = function(){
            };
            
          
        </script>
        
        <div>
            
            <h:form id = "idform">
            
            <p:panelGrid id = "idpanelgrid" columns ="2" styleClass = "settingsgrid">
                   
                <h:outputText value="Node:" styleClass = "inputfield" />                 
                <h:inputText  id = "idnode" value = "#{data.node}" onchange = "submit()" styleClass = "inputfield" required = "true"  valueChangeListener = "#{data.valueChange}" >
                    
                </h:inputText>
                
                <h:outputText  value = "Port:" styleClass = "inputfield" /> 
                <h:inputText  id = "idport" value = "#{data.port}" onchange = "submit()" required = "true" styleClass = "inputfield" valueChangeListener = "#{data.valueChange}" >
                    
                </h:inputText>
                
                <h:outputText  value = "Address:" styleClass="inputfield" />
                <p:inputText id = "idaddress" value = "#{data.address}"  required = "true" onchange = "submit()" styleClass="addresssize" valueChangeListener = "#{data.valueChange}" >
                    
                </p:inputText>
               
                <h:outputText value = "Timer:[s]" styleClass = "inputfield" />
                <h:inputText  id = "idtimer" value = "#{data.timer}" required = "true" onchange= "submit()" styleClass="inputfield" valueChangeListener = "#{data.valueChange}" >
                    
                </h:inputText>
                
                <h:outputText value = "Pir:[s]" styleClass="inputfield" />
                <h:inputText id = "idpir" value = "#{data.pir}" required = "true" onchange = "submit()" styleClass = "inputfield" valueChangeListener = "#{data.valueChange}" >
                
                </h:inputText>
                
                <h:outputText value = "White" styleClass="inputfield" /> 
                <h:inputText  id = "idwhite" value = "#{data.white}" required = "true" onchange = "submit()" styleClass="inputfield" valueChangeListener = "#{data.valueChange}" >
                
                </h:inputText>
                    
            </p:panelGrid>
                
                
            </h:form>
        </div>
    </h:body>
</html>
