<?xml version="1.0" encoding="UTF-8"?>
<!--
To change this license header, choose License Headers in Project Properties.
To change this template file, choose Tools | Templates
and open the template in the editor.
-->
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:p="http://primefaces.org/ui" >
    <h:head>
        <link rel="stylesheet" href="style.css" type="text/css"/>
        <meta http-equiv= "cache-control" content="no-cache"/>
        <meta http-equiv= "expires" content = "0" />
        <meta http-equiv= "pragma" content= "no-cache" />
        <title>Settings</title>
        <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
        <script src="javascript.js"/>
    </h:head>
    <h:body>
        <script>
            var prevVal;
            var childNode;
            var i;
            window.onload = function(){
                
                try{
                    childNode = document.getElementById('idform:idnode');
                    childNode.addEventListener('blur',function(){
                      var testNode = new RegExp("^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$");
                      var match = testNode.test(this.value);
                      if (match === true){
                          rcnode([{name:"Node",value:this.value}]);                          
                      }
                      else{
                          alert("Node is not a valid IP Address");
                          $(this).val(prevVal);
                      }
                    });
                    childNode.addEventListener("focus",function(){
                        prevVal = this.value;
                    });
                }
                catch(e){
                    alert("Exception:" + e);
                    $(this).val(prevVal);
                }
            
            
                try{
                    childNode = document.getElementById('idform:idport');
                    childNode.addEventListener('blur',function(){
                        var testPort = new RegExp("^((6553[0-5])|(655[0-2][0-9])|(65[0-4][0-9]{2})|(6[0-4][0-9]{3})|([1-5][0-9]{4})|([0-5]{0,5})|([0-9]{1,4}))$");
                        var match = testPort.test(this.value);
                        if (match === true){
                            rcport([{name:"Port",value:this.value}]);
                        }
                        else{
                            alert("Port must be a Value between 0 and 65535");
                            $(this).val(prevVal);
                        }
                    });
                    childNode.addEventListener("focus", function(){
                       prevVal = this.value; 
                    });
                }
                catch(e){
                    alert("Exception:" + e);
                    $(this).val(prevVal);
                }
           
                try{
                    childNode = document.getElementById('idform:idaddress');
                    childNode.addEventListener('blur',function(){
                       var testAddress = new RegExp("^(([0-9][1-9])|([1-9][0-9])|[0-9])$");
                       var match = testAddress.test(this.value);
                       if (match === true){
                           rcaddress([{name:"Address",value:this.value}]);
                       }
                       else{
                           alert("Address must be a Value between 0 and 99");
                           $(this).val(prevVal);
                       }
                    });
                    childNode.addEventListener("focus", function(){
                       prevVal = this.value; 
                    });
                }
                catch(e){
                    alert("Exception:" + e);
                    $(this).val(prevVal);
                }
                
                try{
                    childNode = document.getElementById('idform:idtimer');
                    childNode.addEventListener('blur',function(){
                        var testTimer = new RegExp("^[0-9]{1,4}$");
                        var match = testTimer.test(this.value);
                        if (match === true){
                           rctimer([{name:"Timer",value:this.value}]) ;
                        }
                        else{
                          alert("Timer must be a Value between 0 and 9999");
                          $(this).val(prevVal);
                        }
                    });
                    childNode.addEventListener("focus",function(){
                        prevVal = this.value;
                    });
                }
                catch(e){
                    alert("Exception:" + e);
                    $(this).val(prevVal);
                }
               
                try{
                    childNode = document.getElementById('idform:idpir');
                    childNode.addEventListener('blur',function(){
                        var testPir = new RegExp("^[0-9]{1,4}$");
                        var match = testPir.test(this.value);
                        if (match === true){
                            rcpir([{name:"Pir",value:this.value}]);
                        }
                        else{
                            alert("Pir must be a Value between 0 and 9999");
                            $(this).val(prevVal);
                        }
                    });
                    childNode.addEventListener("focus", function(){
                        prevVal = this.value;
                    });
                }
                catch(e){
                    alert("Exception:" + e);
                    $(this).val(prevVal);
                }  

                try{
                    childNode = document.getElementById('idform:idwhite');
                    childNode.addEventListener('blur',function(){
                        
                        var str = this.value;
                        var retVal = checkWhite(str);
                        if (retVal === true){
                            rcwhite([{name:"White",value:this.value}]);
                        }
                        else{
                            alert("White must be a Value between 0 and 255");
                            $(this).val(prevVal);                            
                        }
                        
                    });
                    childNode.addEventListener("focus", function(){
                        prevVal = this.value;
                    });
                }
                catch(e){
                    alert("Exception:" + e);
                    $(this).val(prevVal);
                }
            };
            
            window.onbeforeunload = function(){
                //window.event.returnValue = "RetVal";
                var childNodeNode   = document.getElementById("idform:idnode");
                var childNodePort   = document.getElementById("idform:idport");
                var childNodeAddress= document.getElementById("idform:idaddress");
                var childNodeTimer  = document.getElementById("idform:idtimer");
                var childNodePir    = document.getElementById("idform:idpir");
                var childNodeWhite  = document.getElementById("idform:idwhite");
                rcclose([{name:"Node", value:childNodeNode.value},{name:"Port", value:childNodePort.value},{name: "Address", value: childNodeAddress.value},
                    {name:"Timer", value:childNodeTimer.value},{name:"Pir", value: childNodePir.value},{name:"White", value: childNodeWhite.value}]);
                /*
                if (childNode !== null){
                    rcnode([{name:"Node", value:childNode.value}]);
                }
                
                childNode = document.getElementById("idform:idport");
                if (childNode !== null){
                    rcport([{name: "Port", value: childNode.value}]);
                }
                
                childNode = document.getElementById("idform:idaddress");
                if (childNode !== null){
                    rcaddress([{name:"Address"}, value:childNode.value]);
                }
                
                childNode = document.getElementById("idform:idtimer");
                if (childNode !== null){
                    rctimer([{name:"Timer", value: childNode.value}]);
                }
                
                childNode = document.getElementById("idform:idpir");
                if (childNode !== null){
                    rcpir([{name:"Pir", value: childNode.value}]);
                }
                
                childNode = document.getElementById("idform:idwhite");
                if (childNode !== null){
                    rcwhite([{name: "White", value: childNode.value}]);
                }
                */
            };


        </script>
        <div>
            <h:form id = "idform">
            <p:remoteCommand     name = "rcclose" process = "@this" action = "#{data.setOnClose()}" />
            <p:panelGrid id = "idpanelgrid" columns ="3" styleClass = "settingsgrid">
                
                <p:remoteCommand name = "rcnode" process = "@this" action = "#{data.setParams()}" >
                    
                </p:remoteCommand>        
                <h:outputText value="Node:" styleClass = "inputfield" /> 
                <h:inputText  id = "idnode" value = "#{data.getNode()}" styleClass = "inputfield" required = "true" >
                </h:inputText>
                
                <p:remoteCommand name = "rcport" process = "@this" action = "#{data.setParams()}" />
                <h:outputText  value = "Port:" styleClass = "inputfield" /> 
                <h:inputText  id = "idport" value = "#{data.getPort()}" required = "true" styleClass = "inputfield">
                </h:inputText>
                
                <p:remoteCommand name = "rcaddress" process = "@this" action = "#{data.setParams()}" />
                <h:outputText  value = "Address:" styleClass="inputfield" />
                <p:inputText id = "idaddress" value = "#{data.getAddress()}"  styleClass="addresssize">
                </p:inputText>
                
                <p:remoteCommand name = "rctimer" process = "@this" action = "#{data.setParams()}" />
                <h:outputText value = "Timer:[s]" styleClass = "inputfield" />
                <h:inputText  id = "idtimer" value = "#{data.getTimer()}" styleClass="inputfield" >
                </h:inputText>
                
                <p:remoteCommand name = "rcpir" process = "@this" action = "#{data.setParams()}" />
                <h:outputText value = "Pir:[s]" styleClass="inputfield" />
                <h:inputText id = "idpir" value = "#{data.getPir()}" styleClass = "inputfield" >
                </h:inputText>
                
                <p:remoteCommand name = "rcwhite" process = "@this" action = "#{data.setParams()}" />
                <h:outputText value = "White" styleClass="inputfield" /> 
                <h:inputText  id = "idwhite" value = "#{data.getWhite()}" styleClass="inputfield" >
                </h:inputText>
                
                
            </p:panelGrid>
          
            </h:form>
            
            
        </div>
    </h:body>
</html>
