<?xml version="1.0" encoding="UTF-8"?>
<!--
To change this license header, choose License Headers in Project Properties.
To change this template file, choose Tools | Templates
and open the template in the editor.
-->
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:p="http://primefaces.org/ui" >
    <h:head>
        <link rel="stylesheet" href="style.css" type="text/css"/>

        <title>Settings</title>
        <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
        <script src="javascript.js"/>
        
        
    </h:head>
    <h:body>
        <script>
            var prevVal;
            var childNode;
            var i;
            window.onload = function(){
                try{
                    childNode = document.getElementById('idform:idnode');
                    childNode.addEventListener('blur',function(){
                      var testNode = new RegExp("^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$");
                      var match = testNode.test(this.value);
                      if (match === true){
                          alert("Node match");
                          rcnode([{name:'Node',value:this.value}]);
                      }
                      else{
                          alert("Node not valid");
                          $(this).val(prevVal);
                      }
                    });
                    childNode.addEventListener("focus",function(){
                        prevVal = this.value;
                    });
                }
                catch(e){
                    alert("Exception:" + e);
                    $(this).val(prevVal);
                }
                
                try{
                    childNode = document.getElementById('idform:idport');
                    childNode.addEventListener('blur',function(){
                        var testPort = new RegExp("^((6553[0-5])|(655[0-2][0-9])|(65[0-4][0-9]{2})|(6[0-4][0-9]{3})|([1-5][0-9]{4})|([0-5]{0,5})|([0-9]{1,4}))$");
                        var match = testPort.test(this.value);
                        if (match === true){
                            
                        }
                        else{
                            alert("Port Invalid");
                            $(this).val(prevVal);
                        }
                    });
                    childNode.addEventListener("focus", function(){
                       prevVal = this.value; 
                    });
                }
                catch(e){
                    alert("Exception:" + e);
                    $(this).val(prevVal);
                }
                
                try{
                    childNode = document.getElementById('idform:idaddress');
                    childNode.addEventListener('blur',function(){
                       var testAddress = new RegExp("^(([0-9][1-9])|([1-9][0-9])|[0-9])$");
                       var match = testAddress.test(this.value);
                       if (match === true){
                           
                       }
                       else{
                           alert("Address not Valid");
                           $(this).val(prevVal);
                       }
                    });
                    childNode.addEventListener("focus", function(){
                       prevVal = this.value; 
                    });
                }
                catch(e){
                    alert("Exception:" + e);
                    $(this).val(prevVal);
                }
                
                try{
                    childNode = document.getElementById('idform:idtimer');
                    childNode.addEventListener('blur',function(){
                        var testTimer = new RegExp("^[0-9]{1,4}$");
                        var match = testTimer.test(this.value);
                        if (match === true){
                            
                        }
                        else{
                          alert("Timer not Valid:" + this.value);
                          $(this).val(prevVal);
                        }
                    });
                    childNode.addEventListener("focus",function(){
                        prevVal = this.value;
                    });
                }
                catch(e){
                    alert("Exception:" + e);
                    $(this).val(prevVal);
                }
               
                try{
                    childNode = document.getElementById('idform:idpir');
                    childNode.addEventListener('blur',function(){
                        var testPir = new RegExp("^[0-9]{1,4}$");
                        var match = testPir.test(this.value);
                        if (match === true){
                            
                        }
                        else{
                            alert("Pir not Valid");
                            $(this).val(prevVal);
                        }
                    });
                    childNode.addEventListener("focus", function(){
                        prevVal = this.value;
                    });
                }
                catch(e){
                    alert("Exception:" + e);
                    $(this).val(prevVal);
                }
                try{
                    childNode = document.getElementById('idform:idwhite');
                    childNode.addEventListener('blur',function(){
                        var testWhite = new RegExp("([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])");
                        var match = testWhite.test(this.value);
                        if (match === true){
                            
                        }
                        else{
                            alert("White not Valid");
                            $(this).val(prevVal);
                        }
                    });
                    childNode.addEventListener("focus", function(){
                        prevVal = this.value;
                    });
                }
                catch(e){
                    alert("Exception:" + e);
                    $(this).val(prevVal);
                }
            };
        </script>
        <div>
            <h:form id = "idform">
            
            <p:panelGrid id = "idpanelgrid" columns ="2" styleClass = "settingsgrid">
                <p:remoteCommand name ="rcnode" actionListener = "#{data.test}" />
                <f:attribute name="Node" value = "Attribute" />
                
                <h:outputText value="Node:" styleClass = "inputfield" /> 
                <h:inputText  class = "nodeclass" id = "idnode" value = "#{data.getNode()}" styleClass = "inputfield" required = "true" validatorMessage="Value does not match pattern.">
                </h:inputText>
                
                
                <h:outputText  value = "Port:" styleClass = "inputfield" /> 
                <h:inputText  id = "idport" value = "#{data.getPort()}" required = "true" styleClass = "inputfield">
                    <f:validateRegex pattern = "" />
                </h:inputText>
                
          
                <h:outputText  value = "Address:" styleClass="inputfield" />
                <p:inputText id = "idaddress" value = "#{data.getAddress()}"  styleClass="addresssize">
                </p:inputText>
                
                
                <h:outputText value = "Timer:[s]" styleClass = "inputfield" />
                <h:inputText  id = "idtimer" value = "#{data.getTimer()}" styleClass="inputfield" >
                </h:inputText>
                
                
                <h:outputText value = "Pir:[s]" styleClass="inputfield" />
                <h:inputText id = "idpir" value = "#{data.getPir()}" styleClass = "inputfield" >
                </h:inputText>
                
                
                <h:outputText value = "White" styleClass="inputfield" /> 
                <h:inputText  id = "idwhite" value = "#{data.getWhite()}" styleClass="inputfield" >
                </h:inputText>
                
                
            </p:panelGrid>
          
            </h:form>
            
            
        </div>
    </h:body>
</html>
